----------------------------------------------------------------------------------------------
/*ASCOF 2E (formerly 1G)
The proportion of people who receive long-term support who live in their home or with family*/
----------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------
/*
Denominator = Number of Clients who received Long Term Support during the year
Numerator = Number of Clients who received Long Term Support during the year who are living on their own or with family
Outcome = Proportion(%) of Clients who received Long Term Support during the year who are living on their own or with family
*/
----------------------------------------------------------------------------------------------------------------------------



/*Create reference table #REF_Accommodation_Status to pull through Settled/Unsettled Accommodation*/
drop table if exists #REF_Accommodation_Status
create table #REF_Accommodation_Status
(Accommodation_Status varchar(200)
,Accommodation_Status_Group int
,Accommodation_Sort_Order int)

insert into #REF_Accommodation_Status
(Accommodation_Status
,Accommodation_Status_Group
,Accommodation_Sort_Order)
values
('Owner occupier or shared ownership scheme',1,1)
,('Tenant',1,2)
,('Tenant - private landlord',1,3)
,('Settled mainstream housing with family / friends',1,4)
,('Supported accommodation / supported lodgings / supported group home',1,5)
,('Shared Lives scheme',1,6)
,('Approved premises for offenders released from prison or under probation supervision',1,7)
,('Sheltered housing / extra care housing / other sheltered housing',1,8)
,('Mobile accommodation for Gypsy / Roma and Traveller communities',1,9)
,('Rough sleeper / squatting',0,10)
,('Night shelter / emergency hostel / direct access hostel',0,11)
,('Refuge',0,12)
,('Placed in temporary accommodation by the council (inc. homelessness resettlement)',0,13)
,('Staying with family / friends as a short-term guest',0,14)
,('Acute / long-term healthcare residential facility or hospital',0,15)
,('Registered care home',0,16)
,('Registered nursing home',0,17)
,('Prison / Young offenders institution / detention centre',0,18)
,('Other temporary accommodation',0,19)
,('Unknown', 0,20)



--------------------------------------------------------------------------
/*CREATE TABLE RETURNING LATEST SUBMISSION WITHIN THE PERIOD OF INTEREST*/
--------------------------------------------------------------------------
/*
This code uses a procedure at the beginning to determine the last file submission
from each LA within the window, on the understanding that this was a Final and complete submission.

This process helps to cut down on duplicates and also ensure that the latest edition of each Event is selected.
Because the CLD submissions append/stack and no old data is deleted, then without running a process such as this below previous 
iterations of old events that have subsequently been updated and/or closed will come through 
e.g an event entered onto the system in 2022 showing as open (no Event End Date) will pass through the date filters later on in the process
despite a more recent LA submission in 2024 showing that the same Event ended/closed in 2023.

Set the date parameters for period of interest at the end of the query as per the annotated instructions
*/

drop table if exists #Latest_Submission
  SELECT DISTINCT
    LA_Name,
    ImportDate
     INTO #Latest_Submission
  FROM (
    SELECT
      *,
      ROW_NUMBER() OVER(PARTITION BY LA_Name, LA_Code ORDER BY ImportDate DESC) row
    FROM (
      SELECT
        LA_Name,
        LA_Code,
        ImportDate,
        MIN(Reporting_Period_Start_Date) Reporting_Period_Start_Date,
        MAX(Reporting_Period_End_Date) Reporting_Period_End_Date
 
	  FROM [DHSC_ASC].[CLD_R1_Raw]
	  	  WHERE LA_Name IS NOT NULL
      GROUP BY
        LA_Name,
        LA_Code,
        ImportDate
    ) a
    WHERE Reporting_Period_Start_Date <= '2023-04-01' --beginning of Q1 of year of interest (always 1st April where snapshot or in-year)
    AND Reporting_Period_End_Date >= '2023-12-31' --end of period of interest (enter snapshot date here if snapshot required)
    AND ImportDate > '2023-12-31' --should be after the Reporting Period End Date (when LAs can submit data from)
    AND CONVERT(date, ImportDate) <= '2024-03-01' --user can specify how late submissions can be accepted from (submission window closes 1month after quarter end)
  ) b
  WHERE row = 1

/*
Worked Example:

For 2023/24 SALT publications
The 'in-year' i.e. whole financial year period 23/24 (e.g. for LTS001a) 
and also the snapshot 31st March 2024 (e.g. for LTS001b)
would be 

    WHERE Reporting_Period_Start_Date <= '2023-04-01'
    AND Reporting_Period_End_Date >= '2024-03-31'
    AND ImportDate > '2024-04-31'
    AND CONVERT(date, ImportDate) <= '2024-05-01'

*/




----------------------------------------------------------------------------------
/*FILTER DATA APPROPRIATELY FOR ASCOF 2E INDIVIDUALS AND SELECT REPORTING PERIOD*/
----------------------------------------------------------------------------------
DECLARE
  @StartDate DATE,
  @EndDate   DATE

SET @StartDate = '2023-04-01'  -- Complete as required
SET @EndDate = '2023-12-31'    -- Complete as required


--Build the raw table of all Clients in scope of ASCOF 2E
drop table if exists #ASCOF_2E_Build
select a.*
, Case when Accommodation_Status = 'Unknown' or Accommodation_Status is NULL then 0 else 1 end as [Der_Accommodation_Known] -- NULLs treated same as Unknown
into #ASCOF_2E_Build
from [DHSC_ASC].[CLD_R1_Raw] a
inner join #Latest_Submission b on a.LA_Name = b.LA_Name and a.ImportDate = b.ImportDate
where [Service_Type] in ('Long Term Support: Nursing Care', 'Long Term Support: Residential Care', 'Long Term Support: Community')
and (Event_Start_Date <= @EndDate) 
and (Event_End_Date >= @StartDate or Event_End_Date is NULL)
and (Date_of_Death >= @StartDate OR Date_of_Death is NULL)  
and Client_Type = 'Service User'
;


------------------------------------------------------------------------------------------------


-----------------------------------------
/*CREATE AMALGAMATED NHS/LA IDENTIFIER*/
-----------------------------------------
/*initially, find all individuals with an NHS Number and stage into a temporary table*/                               
drop table if exists #uniquenhs
SELECT DISTINCT Der_Unique_Record_ID, Der_NHS_Number_Traced_Pseudo, Der_LA_Person_Unique_Identifier_Pseudo, 'NHS' as [Source]                                                                                                                                                     
INTO #uniquenhs                                                                                                                                                           
FROM #ASCOF_2E_Build                                                                                                                                           
where Der_NHS_Number_Traced_Pseudo is not NULL                                                                                          
;


/*where the NHS Number is missing, pull through all individuals LA Unique ID
except in those cases where the LA Unique ID is already present and associated with an individual in #uniquenhs*/
drop table if exists #missingnhs
SELECT distinct a.Der_Unique_Record_ID, a.Der_NHS_Number_Traced_Pseudo, a.Der_LA_Person_Unique_Identifier_Pseudo, 'LA' as [Source]                                                                             
INTO #missingnhs                                                                                                                                                           
FROM #ASCOF_2E_Build a                                                                                                                                                
left join #uniquenhs b on a.Der_LA_Person_Unique_Identifier_Pseudo = b.Der_LA_Person_Unique_Identifier_Pseudo                                                                                                          
where a.Der_NHS_Number_Traced_Pseudo is NULL                                                                                              
and b.Der_LA_Person_Unique_Identifier_Pseudo is NULL                                                                                     
;


/*Stack the NHS IDs and the LA IDs from the two temp tables underneath each other in a final table, as an amalgamated 'ID' field*/
drop table if exists #FINAL
select distinct Der_Unique_Record_ID, Der_NHS_Number_Traced_Pseudo as [ID], [Source]                                     
into #FINAL                                                                                                                                                                     
from #uniquenhs                                                                                                                                                           
UNION                                                                                                                                                               
select distinct Der_Unique_Record_ID, Der_LA_Person_Unique_Identifier_Pseudo as [ID], [Source]                        
from #missingnhs
;


/*Add a column to Raw table with the new ID field*/
alter table #ASCOF_2E_Build add [ID] nvarchar (200)
GO
;
update a
set a.[ID] = b.[ID]
from #ASCOF_2E_Build a left join #FINAL b on a.Der_Unique_Record_ID = b.Der_Unique_Record_ID


/*delete rows from table where [ID] is NULL
These records can not be assigned to an individual with 100% accuracy and without the risk of double-counting 
as the NHS ID is NULL and the LA ID is already present in the data associated to an NHS Number*/
delete from #ASCOF_2E_Build
where [ID] is NULL



----------------------------------------------------------------------------------------------------------------------------


------------------------
/*DE-DUPLICATION PROCESS
------------------------
The following routine is designed to de-duplicate in any instances where Clients have multiple
conflicting Accommodation Status pulling through. This is done by taking the status recorded on 
1. Latest Event Start Date within the period of interest
2. Choosing a Known Accommodation Status over an Unknown in cases where both exist for the same Client using the derived
   'Der_Accommodation_Known flag created in the _BUILD table
*/

--1. Choose the record with the latest event start date and pull through Accommodation Status 
--This is in-line with SALT guidance on Accommodation Status where last known status is chosen
drop table if exists #ASCOF_2E_Latest
select a.LA_CODE, a.Gender, a.Event_Start_Date, a.Accommodation_Status, a.[ID]
into #ASCOF_2E_Latest
from #ASCOF_2E_Build a
left join  
(
	SELECT Event_Start_Date, LA_CODE, [ID], ROW_NUMBER() over (partition by LA_CODE, [ID] order by Event_Start_Date desc) as Rn 
	FROM #ASCOF_2E_Build
) b
on a.LA_CODE = b.LA_CODE and a.[ID] = b.[ID] and a.[Event_Start_Date] = b.Event_Start_Date
where b.Rn = 1
group by a.LA_CODE, a.Gender, a.Event_Start_Date, Accommodation_Status, a.[ID]
;



--2. Select only records with a Known Accommodation Status if both Known and Unknown exist on same [ID] from cohort 1.
--   (code takes the highest 'Der_Accommodation_Known' flag where 0 = Unknown and 1 = Known)
drop table if exists #ASCOF_2E_COMBINED
SELECT a.LA_Code, b.[ID], b.[Event_Start_Date], Max(Der_Accommodation_Known) as [MaxAccommodationKnown]
into #ASCOF_2E_COMBINED
FROM #ASCOF_2E_Build a
left join #ASCOF_2E_Latest b on a.LA_CODE = b.LA_CODE and a.[ID] = b.[ID] and a.Event_Start_Date = b.Event_Start_Date
where b.[ID] is not NULL
GROUP BY a.LA_Code, b.[ID], b.[Event_Start_Date]
;


-- Pull through all the Accommodation Status and Event Start information for each [ID] in the Combined table
drop table if exists #ASCOF_2E_Final_Staging
select b.LA_Code, b.Gender, b.Accommodation_Status, b.[ID], b.[Event_Start_Date], a.[MaxAccommodationKnown]
into #ASCOF_2E_Final_Staging
from #ASCOF_2E_COMBINED a 
left join #ASCOF_2E_Build b on a.LA_Code = b.LA_CODE and a.[ID] = b.[ID] and a.[Event_Start_Date] = b.[Event_Start_Date] and a.[MaxAccommodationKnown] = b.Der_Accommodation_Known
group by  b.LA_Code, b.Gender, b.Accommodation_Status, b.[ID], b.[Event_Start_Date], a.[MaxAccommodationKnown]
;



-- Build a table of Duplicate records - at this stage after the previous de-duplication procedures 1 & 2 above this will be records
-- that have identical Event Start Dates, for the same individual at the same LA, within the same submission file - but with DIFFERENT
-- Accommodation Status. At the next stage, all these entries will be CASED as 'Unknown' for purposes of reporting.
drop table if exists #ASCOF_2E_Accommodation_Status_duplicates
select LA_CODE, [ID], Gender, Event_Start_Date, MaxAccommodationKnown, count([ID]) as [COUNT]
into #ASCOF_2E_Accommodation_Status_duplicates
from #ASCOF_2E_Final_Staging 
group by LA_CODE, [ID], Gender, Event_Start_Date, MaxAccommodationKnown
having count([ID]) > 1
;

select *
from #ASCOF_2E_Accommodation_Status_duplicates

-----------------------------------------------------------------------
/*CREATE RAW ASCOF 2E TABLE	USED TO BUILD DENOMINATORS AND NUMERATORS*/
-----------------------------------------------------------------------
-- Accommodation Status is altered as part of the build to over-write any remaining conflicting Accommodation Status to 'Unknown' in all instances
drop table if exists #ASCOF_2E_Raw
select distinct 
a.LA_CODE
, a.Gender
, CASE When b.[COUNT] is not NULL then 'Unknown' else a.Accommodation_Status End as [Accommodation_Status]
, a.[ID]
into #ASCOF_2E_Raw
from #ASCOF_2E_Final_Staging a
left join #ASCOF_2E_Accommodation_Status_duplicates b on a.LA_code = b.LA_Code and a.[ID] = b.[ID] and a.Gender = b.Gender and a.Event_Start_Date = b.Event_Start_Date and a.MaxAccommodationKnown = b.MaxAccommodationKnown
;



------------------------------
/*CREATING DENOMINATOR TABLE*/
------------------------------
--Male
drop table if exists #ASCOF_2E_Denom_Male
select LA_CODE, count (distinct [ID]) as [Male_Denom]
into #ASCOF_2E_Denom_Male
from #ASCOF_2E_Raw
where Gender = 'Male'
group by LA_CODE
;

--Female
drop table if exists #ASCOF_2E_Denom_Female
select LA_CODE, count (distinct [ID]) as [Female_Denom]
into #ASCOF_2E_Denom_Female
from #ASCOF_2E_Raw
where Gender = 'Female'
group by LA_CODE
;

--Total
drop table if exists #ASCOF_2E_Denom_Total
select LA_CODE, count (distinct [ID]) as [Total_Denom]
into #ASCOF_2E_Denom_Total
from #ASCOF_2E_Raw
where Gender in ('Male', 'Female')
group by LA_CODE
;

--FINAL DENOMINATOR TABLE
drop table if exists #ASCOF_2E_Denom
select a.LA_CODE, a.[Total_Denom], b.[Male_Denom], c.[Female_Denom]
into #ASCOF_2E_Denom
from #ASCOF_2E_Denom_Total a
left join #ASCOF_2E_Denom_Male b on a.LA_CODE = b.LA_CODE
left join #ASCOF_2E_Denom_Female c on a.LA_CODE = c.LA_CODE
group by a.LA_CODE, a.[Total_Denom], b.[Male_Denom], c.[Female_Denom]
;





----------------------------
/*CREATING NUMERATOR TABLE*/
----------------------------
--Male
drop table if exists #ASCOF_2E_Num_Male
select a.LA_CODE, count (distinct a.[ID]) as [Male_Num]
into #ASCOF_2E_Num_Male
from #ASCOF_2E_Raw a
left join #REF_Accommodation_Status b on a.Accommodation_Status = b.Accommodation_Status
where a.Gender = 'Male'
and b.Accommodation_Status_Group = 1
group by a.LA_CODE
;

--Female
drop table if exists #ASCOF_2E_Num_Female
select a.LA_CODE, count (distinct a.[ID]) as [Female_Num]
into #ASCOF_2E_Num_Female
from #ASCOF_2E_Raw a
left join #REF_Accommodation_Status b on a.Accommodation_Status = b.Accommodation_Status
where a.Gender = 'Female'
and b.Accommodation_Status_Group = 1
group by a.LA_CODE
;

--Total
drop table if exists #ASCOF_2E_Num_Total
select a.LA_CODE, count (distinct a.ID) as [Total_Num]
into #ASCOF_2E_Num_Total
from #ASCOF_2E_Raw a
left join #REF_Accommodation_Status b on a.Accommodation_Status = b.Accommodation_Status
where Gender in ('Male', 'Female')
and b.Accommodation_Status_Group = 1
group by a.LA_CODE
;


--FINAL NUMERATOR TABLE
drop table if exists #ASCOF_2E_Num
select a.LA_CODE, a.[Total_Num], b.[Male_Num], c.[Female_Num]
into #ASCOF_2E_Num
from #ASCOF_2E_Num_Total a
left join #ASCOF_2E_Num_Male b on a.LA_CODE = b.LA_CODE
left join #ASCOF_2E_Num_Female c on a.LA_CODE = c.LA_CODE
group by a.LA_CODE, a.[Total_Num], b.[Male_Num], c.[Female_Num]
;




------------------------------------------------------
/*CALCULATE MEASURE AND CREATE FINAL ASCOF 2E OUTPUT*/
------------------------------------------------------
drop table if exists #ASCOF_2E
select a.LA_CODE, a.[Total_Denom], a.[Male_Denom], a.[Female_Denom]
,b.[Total_Num], b.[Male_Num], b.[Female_Num]
,CAST(b.Total_Num AS Decimal) / CAST(a.Total_Denom AS Decimal) * 100 as 'Total_Outcome'
,CAST(b.Male_Num AS Decimal) / CAST(a.Male_Denom AS Decimal) * 100 as 'Male_Outcome'
,CAST(b.Female_Num AS Decimal) / CAST(a.Female_Denom AS Decimal) * 100 as 'Female_Outcome'
into #ASCOF_2E
from #ASCOF_2E_Denom a
left join #ASCOF_2E_Num b on a.LA_CODE = b.LA_CODE
group by a.LA_CODE, a.[Total_Denom], a.[Male_Denom], a.[Female_Denom],
b.[Total_Num], b.[Male_Num], b.[Female_Num]
,CAST(b.Total_Num AS Decimal) / CAST(a.Total_Denom AS Decimal)
,CAST(b.Male_Num AS Decimal) / CAST(a.Male_Denom AS Decimal)
,CAST(b.Female_Num AS Decimal) / CAST(a.Female_Denom AS Decimal)
;



select *
from #ASCOF_2E