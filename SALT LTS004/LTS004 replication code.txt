-----------------------------------------------------
/*CODE TO RE-CREATE LTS004: ALL TABLES 1, 2A AND 2B*/
-----------------------------------------------------

/* Final data tables are saved as:

#LTS004_T1_Final
#LTS004_T2a_Final
#LTS004_T2b_Final

Queries of these tables, written in a way to extract for SALT, are included in this script at the end 
of each respective table build in turn
*/

-------------------------------------------------------------
/*CREATE REFERENCE TABLE #REF_EMPLOYMENT_STATUS FOR TABLE 1*/
-------------------------------------------------------------
--NOTE: Check periodically to ensure the Defined List in CLD spec has not changed!
drop table if exists #REF_Employment_Status	
create table #REF_Employment_Status
(Employment_Status varchar(200)
,Employment_Status_Group int
,Employment_Sort_Order int)

insert into #REF_Employment_Status
(Employment_Status
,Employment_Status_Group
,Employment_Sort_Order)
values
('Paid: Less than 16 hours a week',1,1)
,('Paid: 16 or more hours a week',1,2)
,('Paid: Hours per week unknown',1,3)
,('Not in Paid Employment (seeking work)',0,4)
,('Not in Paid Employment (not actively seeking work / retired)',0,5)
,('Not in Paid Employment (voluntary work only)',0,6)
,('Unknown',0,7)
;


-------------------------------------------------------------------------
/*CREATE REFERENCE TABLE #REF_ACCOMMODATION_STATUS FOR TABLES 2a AND 2b*/
-------------------------------------------------------------------------
--NOTE: Check periodically to ensure the Defined List in CLD spec has not changed!
drop table if exists #REF_Accommodation_Status
create table #REF_Accommodation_Status
(Accommodation_Status varchar(200)
,Accommodation_Status_Group int
,Accommodation_Sort_Order int)

insert into #REF_Accommodation_Status
(Accommodation_Status
,Accommodation_Status_Group
,Accommodation_Sort_Order)
values
('Owner occupier or shared ownership scheme',1,1)
,('Tenant',1,2)
,('Tenant - private landlord',1,3)
,('Settled mainstream housing with family / friends',1,4)
,('Supported accommodation / supported lodgings / supported group home',1,5)
,('Shared Lives scheme',1,6)
,('Approved premises for offenders released from prison or under probation supervision',1,7)
,('Sheltered housing / extra care housing / other sheltered housing',1,8)
,('Mobile accommodation for Gypsy / Roma and Traveller communities',1,9)
,('Rough sleeper / squatting',0,10)
,('Night shelter / emergency hostel / direct access hostel',0,11)
,('Refuge',0,12)
,('Placed in temporary accommodation by the council (inc. homelessness resettlement)',0,13)
,('Staying with family / friends as a short-term guest',0,14)
,('Acute / long-term healthcare residential facility or hospital',0,15)
,('Registered care home',0,16)
,('Registered nursing home',0,17)
,('Prison / Young offenders institution / detention centre',0,18)
,('Other temporary accommodation',0,19)
,('Unknown', 0,20)





--------------------------------------------------------------------------
/*CREATE TABLE RETURNING LATEST SUBMISSION WITHIN THE PERIOD OF INTEREST*/
--------------------------------------------------------------------------
/*
This code uses a procedure at the beginning to determine the last file submission
from each LA within the window, on the understanding that this was a Final and complete submission.

This process helps to cut down on duplicates and also ensure that the latest edition of each Event is selected.
Because the CLD submissions append/stack and no old data is deleted, then without running a process such as this below previous 
iterations of old events that have subsequently been updated and/or closed will come through 
e.g an event entered onto the system in 2022 showing as open (no Event End Date) will pass through the date filters later on in the process
despite a more recent LA submission in 2024 showing that the same Event ended/closed in 2023.

Set the date parameters for period of interest at the end of the query as per the annotated instructions
*/

drop table if exists #Latest_Submission
  SELECT DISTINCT
    LA_Name,
    ImportDate
     INTO #Latest_Submission
  FROM (
    SELECT
      *,
      ROW_NUMBER() OVER(PARTITION BY LA_Name, LA_Code ORDER BY ImportDate DESC) row
    FROM (
      SELECT
        LA_Name,
        LA_Code,
        ImportDate,
        MIN(Reporting_Period_Start_Date) Reporting_Period_Start_Date,
        MAX(Reporting_Period_End_Date) Reporting_Period_End_Date
 
	  FROM [DHSC_ASC].[CLD_R1_Raw]
	  	  WHERE LA_Name IS NOT NULL
      GROUP BY
        LA_Name,
        LA_Code,
        ImportDate
    ) a
    WHERE Reporting_Period_Start_Date <= '2023-04-01' --beginning of Q1 of year of interest (always 1st April where snapshot or in-year)
    AND Reporting_Period_End_Date >= '2023-12-31' --end of period of interest (enter snapshot date here if snapshot required)
    AND ImportDate > '2023-12-31' --should be after the Reporting Period End Date (when LAs can submit data from)
    AND CONVERT(date, ImportDate) <= '2024-03-01' --user can specify how late submissions can be accepted from (submission window closes 1month after quarter end)
  ) b
  WHERE row = 1

/*
Worked Example:

For 2023/24 SALT publications
The 'in-year' i.e. whole financial year period 23/24 (e.g. for LTS001a) 
and also the snapshot 31st March 2024 (e.g. for LTS001b)
would be 

    WHERE Reporting_Period_Start_Date <= '2023-04-01'
    AND Reporting_Period_End_Date >= '2024-03-31'
    AND ImportDate > '2024-04-31'
    AND CONVERT(date, ImportDate) <= '2024-05-01'

*/




--------------------------------------------------------------------------------------
/*FILTER DATA APPROPRIATELY FOR LTS004 INDIVIDUALS AND SELECT SALT REPORTING PERIOD*/
--------------------------------------------------------------------------------------
DECLARE
  @StartDate DATE,
  @EndDate   DATE

SET @StartDate = '2023-04-01'  -- Complete as required. Set further down the script also (3 other places in total)
SET @EndDate = '2023-12-31'    -- Complete as required. Set further down the script also (1 other place in total)


drop table if exists #LTS004_Build
select *
into #LTS004_Build
from
(
select a.*
, CAST((concat(Der_Birth_Year, '-', Der_Birth_Month, '-', '01')) as DATE) as [Der_DOB] -- Derived using 1st month as an arbitrary date
, FLOOR((DATEDIFF (DAY, (CAST(concat(Der_Birth_Year, '-', Der_Birth_Month, '-', '01') as DATE)), @EndDate))/365.25) as [Der_Age_EndDate] -- Derived age as at period end, using Der_DOB
, Case when Employment_Status = 'Unknown' or Employment_Status is NULL then 0 else 1 end as [Der_Employment_Known] -- NULLS treated same as Unknown
, Case when Accommodation_Status = 'Unknown' or Accommodation_Status is NULL then 0 else 1 end as [Der_Accommodation_Known] -- NULLs treated same as Unknown
from [DHSC_ASC].[CLD_R1_Raw] a
inner join #Latest_Submission b on a.LA_Name = b.LA_Name and a.ImportDate = b.ImportDate
where Event_Type = 'Service'
and [Service_Type] in ('Long Term Support: Nursing Care', 'Long Term Support: Residential Care', 'Long Term Support: Community', 'Long Term Support: Prison')
and Client_Type = 'Service User'
and [Primary_Support_Reason] = 'Learning Disability Support' -- entire LTS004 cohort is for LD clients only
and Event_Start_Date <= @EndDate
and (Event_End_Date >= @StartDate or Event_End_Date is NULL)
and (Date_of_Death >= @StartDate OR Date_of_Death is NULL) 
and (Der_Birth_Month is not NULL and Der_Birth_Year is not NULL) --NULLS need removing as they can not be mapped into either age category
) c
where [Der_Age_EndDate]  between 18 and 64 -- entire LTS004 cohort is for ages 18-64 only
;



-----------------------------------------
/*CREATE AMALGAMATED NHS/LA IDENTIFIER*/
-----------------------------------------
/*initially, find all individuals with an NHS Number and stage into a temporary table*/                               
drop table if exists #uniquenhs
SELECT DISTINCT Der_Unique_Record_ID, Der_NHS_Number_Traced_Pseudo, Der_LA_Person_Unique_Identifier_Pseudo, 'NHS' as [Source]                                                                                                                                                     
INTO #uniquenhs                                                                                                                                                           
FROM #LTS004_Build                                                                                                                                                
where Der_NHS_Number_Traced_Pseudo is not NULL                                                                                          
;


/*where the NHS Number is missing, pull through all individuals LA Unique ID
except in those cases where the LA Unique ID is already present and associated with an individual in #uniquenhs*/
drop table if exists #missingnhs
SELECT distinct a.Der_Unique_Record_ID, a.Der_NHS_Number_Traced_Pseudo, a.Der_LA_Person_Unique_Identifier_Pseudo, 'LA' as [Source]                                                                             
INTO #missingnhs                                                                                                                                                           
FROM #LTS004_Build a                                                                                                                                                
left join #uniquenhs b on a.Der_LA_Person_Unique_Identifier_Pseudo = b.Der_LA_Person_Unique_Identifier_Pseudo                                                                                                          
where a.Der_NHS_Number_Traced_Pseudo is NULL                                                                                              
and b.Der_LA_Person_Unique_Identifier_Pseudo is NULL                                                                                     
;


/*Stack the NHS IDs and the LA IDs from the two temp tables underneath each other in a final table, as an amalgamated 'ID' field*/
drop table if exists #FINAL
select distinct Der_Unique_Record_ID, Der_NHS_Number_Traced_Pseudo as [ID], [Source]                                     
into #FINAL                                                                                                                                                                     
from #uniquenhs                                                                                                                                                           
UNION                                                                                                                                                               
select distinct Der_Unique_Record_ID, Der_LA_Person_Unique_Identifier_Pseudo as [ID], [Source]                        
from #missingnhs
;


/*Add a column to Raw table with the new ID field*/
alter table #LTS004_Build add [ID] nvarchar (200)
GO
;
update a
set a.[ID] = b.[ID]
from #LTS004_Build a left join #FINAL b on a.Der_Unique_Record_ID = b.Der_Unique_Record_ID


/*delete rows from table where [ID] is NULL
These records can not be assigned to an individual with 100% accuracy and without the risk of double-counting 
as the NHS ID is NULL and the LA ID is already present in the data associated to an NHS Number*/
delete from #LTS004_Build
where [ID] is NULL



/*Create raw table*/
drop table if exists #LTS004_Raw
select *
into #LTS004_Raw
from #LTS004_Build


--------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------
/*TABLE 1a INITIAL BUILD: AGED 18-64 BY GENDER AND EMPLOYMENT STATUS*/
----------------------------------------------------------------------
--Add relevant fields from Reference data
--Only join where Employment Status is valid as per the CLD spec. Invalid records will not form part of Table 1 cohort 
drop table if exists #LTS004_T1
select a.*
,b.[Employment_Status_Group]
,b.[Employment_Sort_Order]
into #LTS004_T1
from #LTS004_Raw a
left join #REF_Employment_Status b on trim (a.[Employment_Status]) = trim (b.[Employment_Status])
where b.Employment_Status_Group is not NULL
;



--Code for extracting records where Employment Status did not match the CLD spec (either NULL or Invalid)
drop table if exists #LTS004_T1_INVALID_NULL
select a.*
,b.[Employment_Status_Group]
,b.[Employment_Sort_Order]
into #LTS004_T1_INVALID_NULL
from #LTS004_Raw a
left join #REF_Employment_Status b on trim (a.[Employment_Status]) = trim (b.[Employment_Status])
where b.Employment_Status_Group is NULL
;


------------------------
/*DE-DUPLICATION PROCESS
------------------------
The following routine is designed to de-duplicate in any instances where Clients have multiple
conflicting Employment Status pulling through. This is done by taking the status recorded on 
1. Latest Event Start Date
2. Choosing a Known Emp Status over an Unknown in cases where both exist for the same Client
*/

--1. Choose the record with the latest event start date and pull through Employment Status 
/* This is in-line with SALT guidance on Employment Status where last known status is chosen*/
drop table if exists #LTS004_T1_Latest
select LA_CODE, Gender, a.Event_Start_Date, Employment_Status, Employment_sort_order, a.[ID]
into #LTS004_T1_Latest
from #LTS004_T1 a
left join  
(
	SELECT Event_Start_Date, [ID], ROW_NUMBER() over (partition by [ID] order by Event_Start_Date desc) as Rn 
	FROM #LTS004_T1
) b
on a.[ID] = b.[ID] and a.[Event_Start_Date] = b.Event_Start_Date
where b.Rn = 1
group by LA_CODE, Gender, a.Event_Start_Date, Employment_Status, Employment_sort_order, a.[ID]
;



--2. Select only records with a Known Employment Status if both Known and Unknown exist on same [ID] from cohort 1.
--   (code takes the highest 'Der_Employment_Known' flag where 0 = Unknown and 1 = Known)
drop table if exists #LTS004_T1_COMBINED
SELECT a.LA_Code, b.[ID], b.[Event_Start_Date], Max(Der_Employment_Known) as [MaxEmploymentKnown]
into #LTS004_T1_COMBINED
FROM #LTS004_T1 a
left join #LTS004_T1_Latest b on a.LA_CODE = b.LA_CODE and a.[ID] = b.[ID] and a.Event_Start_Date = b.Event_Start_Date
where 
b.[ID] is not NULL
GROUP BY a.LA_Code, b.[ID], b.[Event_Start_Date]
;


-- Pull through all the Employment Status and Event Start information for each [ID] in the Combined table
drop table if exists #LTS004_T1_Final_Staging
select a.LA_Code, b.Gender, b.Employment_Status, b.[ID], b.[Event_Start_Date], [MaxEmploymentKnown]
into #LTS004_T1_Final_Staging
from #LTS004_T1_COMBINED a 
left join #LTS004_T1 b on a.LA_Code = b.LA_CODE and a.[ID] = b.[ID] and a.[Event_Start_Date] = b.[Event_Start_Date] and a.[MaxEmploymentKnown] = b.Der_Employment_Known
group by  a.LA_Code, b.Gender, b.Employment_Status, b.[ID], b.[Event_Start_Date], [MaxEmploymentKnown]
;



-- Build a table of Duplicate records - at this stage after the previous de-duplication procedures 1 & 2 above this will be records
-- that are identical for the purposes of LTS004 apart from having conflicting Employment Status
drop table if exists #LTS004_T1_Employment_Status_duplicates
select LA_CODE, [ID], Gender, Event_Start_Date, MaxEmploymentKnown, count([ID]) as [COUNT]
into #LTS004_T1_Employment_Status_duplicates 
from #LTS004_T1_Final_Staging 
group by LA_CODE, [ID], Gender, Event_Start_Date, MaxEmploymentKnown
having count([ID]) > 1
;



-------------------------------
/*CREATE FINAL LTS004 TABLE 1*/
-------------------------------
-- Employment STatus is altered as part of the build to over-write any remaining conflicting Employment Status to 'Unknown' in all instances
drop table if exists #LTS004_T1_Final
select distinct 
a.LA_CODE
, a.Gender
, CASE When b.[COUNT] is not NULL then 'Unknown' else a.Employment_Status End as [Employment_Status]
, a.[ID]
into #LTS004_T1_Final
from #LTS004_T1_Final_Staging a
left join #LTS004_T1_Employment_Status_duplicates b on a.LA_code = b.LA_Code and a.[ID] = b.[ID] and a.Gender = b.Gender and a.Event_Start_Date = b.Event_Start_Date and a.MaxEmploymentKnown = b.MaxEmploymentKnown
;



------------------------------
/*PRODUCE COUNTS FOR TABLE 1*/
------------------------------
--Count of distinct Clients, broken down by Table 1 fields
select LA_CODE, Gender, Employment_Status, count(distinct [ID])
from #LTS004_T1_Final
group by LA_CODE, Gender, Employment_Status
order by LA_CODE
;



--------------------------------------
/*PRODUCE INVALID COUNTS FOR TABLE 1*/
--------------------------------------
--Count of distinct Clients, where Employment Status did not match the CLD spec, broken down by Table 1 fields
select LA_CODE, Gender, 'NULL/Invalid' as [Employment_Status], count(distinct [ID])
from #LTS004_T1_INVALID_NULL
where [ID] not in
(
select [ID]
from #LTS004_T1_Final
)
group by LA_CODE, Gender
;





---------------------------------------------------------------------------------
/*TABLES 2a AND 2a INITIAL BUILD: AGED 18-64 BY GENDER AND ACCOMMODATION STATUS*/
---------------------------------------------------------------------------------
--Add relevant fields from Reference data
--Only join where Accommodation Status is valid as per the CLD spec. Invalid records will not form part of Table 2 cohort 
drop table if exists #LTS004_T2
select a.*
,b.[Accommodation_Status_Group]
,b.[Accommodation_Sort_Order]
into #LTS004_T2
from #LTS004_Raw a
left join #REF_Accommodation_Status b on trim (a.[Accommodation_Status]) = trim (b.[Accommodation_Status])
where b.Accommodation_Status_Group is not NULL
;

--Code for extracting records where Accommodation Status did not match the CLD spec (either NULL or Invalid)
drop table if exists #LTS004_T2_INVALID_NULL
select a.*
,b.[Accommodation_Status_Group]
,b.[Accommodation_Sort_Order]
into #LTS004_T2_INVALID_NULL
from #LTS004_Raw a
left join #REF_Accommodation_Status b on trim (a.[Accommodation_Status]) = trim (b.[Accommodation_Status])
where b.Accommodation_Status_Group is NULL
;


--------------------------
/*DE-DUPLICATION PROCESS*/
--------------------------

--As per Table 1 routine

--1. Choose the record with the latest event start date and pull through Accommodation Status
/* This is in-line with SALT guidance on Employment Status where last known status is chosen*/
drop table if exists #LTS004_T2_latest
select LA_CODE, Gender, a.Event_Start_Date, Accommodation_Status, Accommodation_Sort_Order, a.[ID]
into #LTS004_T2_latest
from #LTS004_T2 a
left join  
(
	SELECT Event_Start_Date, [ID], ROW_NUMBER() over (partition by [ID] order by Event_Start_Date desc) as Rn 
	FROM #LTS004_T2
) b
on a.[ID] = b.[ID] and a.[Event_Start_Date] = b.Event_Start_Date
where b.Rn = 1
group by LA_CODE, Gender, a.Event_Start_Date, Accommodation_Status, Accommodation_Sort_Order, a.[ID]
;



--2. Select only records with a Known Accommodation Status if both Known and Unknown exist on same [ID] from cohort 1.
--   (code takes the highest 'Der_Accommodation_Known' flag where 0 = Unknown and 1 = Known)
drop table if exists #LTS004_T2_COMBINED
SELECT a.LA_Code, b.[ID], b.[Event_Start_Date], Max(Der_Accommodation_Known) as [MaxAccommodationKnown]
into #LTS004_T2_COMBINED
FROM #LTS004_T2 a
left join #LTS004_T2_Latest b on a.LA_CODE = b.LA_CODE and a.[ID] = b.[ID] and a.Event_Start_Date = b.Event_Start_Date
where 
b.[ID] is not NULL
GROUP BY a.LA_Code, b.[ID], b.[Event_Start_Date]
;


-- Pull through all the Accommodation Status and Event Start information for each [ID] in the Combined table
drop table if exists #LTS004_T2_Final_Staging
select a.LA_Code, b.Gender, b.Accommodation_Status, b.[ID], b.[Event_Start_Date], [MaxAccommodationKnown]
into #LTS004_T2_Final_Staging
from #LTS004_T2_COMBINED a 
left join #LTS004_T2 b on a.LA_Code = b.LA_CODE and a.[ID] = b.[ID] and a.[Event_Start_Date] = b.[Event_Start_Date] and a.[MaxAccommodationKnown] = b.Der_Accommodation_Known
group by  a.LA_Code, b.Gender, b.Accommodation_Status, b.[ID], b.[Event_Start_Date], [MaxAccommodationKnown]
;


-- Build a table of Duplicate records - at this stage after the previous de-duplication procedures 1 & 2 above this will be records
-- that are identical for the purposes of LTS004 apart from having conflicting Accommodation Status
drop table if exists #LTS004_T2_Accommodation_Status_duplicates
select LA_CODE, [ID], Gender, Event_Start_Date, MaxAccommodationKnown, count([ID]) as [COUNT]
into #LTS004_T2_Accommodation_Status_duplicates 
from #LTS004_T2_Final_Staging 
group by LA_CODE, [ID], Gender, Event_Start_Date, MaxAccommodationKnown
having count([ID]) > 1
;


-- Accommodation Status is altered as part of the build to over-write any remaining conflicting Accommodation Status to 'Unknown' in all instances
drop table if exists #LTS004_T2_Final
select distinct 
a.LA_CODE
, a.Gender
, CASE When b.[COUNT] is not NULL then 'Unknown' else a.Accommodation_Status End as [Accommodation_Status]
, a.[ID]
into #LTS004_T2_Final
from #LTS004_T2_Final_Staging a
left join #LTS004_T2_Accommodation_Status_duplicates b on a.LA_code = b.LA_Code and a.[ID] = b.[ID] and a.Gender = b.Gender and a.Event_Start_Date = b.Event_Start_Date and a.MaxAccommodationKnown = b.MaxAccommodationKnown
;


-------------------------------
/*PRODUCE COUNTS FOR TABLE 2a*/
-------------------------------
/*Table 2a: Settled Accommodation table build*/
drop table if exists #LTS004_T2a_Final
select a.LA_CODE, a.Gender, a.Accommodation_Status, a.[ID]
into #LTS004_T2a_Final
from #LTS004_T2_Final a
left join #REF_Accommodation_Status b on a.Accommodation_Status = b.Accommodation_Status
where b.Accommodation_Status_Group = 1
group by a.LA_CODE, a.Gender, a.Accommodation_Status, a.[ID]

/*Counts by LA, Gender and Accommodation Status category*/
select LA_CODE, Gender, Accommodation_Status, count(distinct [ID])
from #LTS004_T2a_Final
group by LA_CODE, Gender, Accommodation_Status



-------------------------------
/*PRODUCE COUNTS FOR TABLE 2b*/
-------------------------------
/*Table 2b: Unsettled Accommodation table build*/
drop table if exists #LTS004_T2b_Final
select a.LA_CODE, a.Gender, a.Accommodation_Status, a.[ID]
into #LTS004_T2b_Final
from #LTS004_T2_Final a
left join #REF_Accommodation_Status b on a.Accommodation_Status = b.Accommodation_Status
where b.Accommodation_Status_Group = 0
group by a.LA_CODE, a.Gender, a.Accommodation_Status, a.[ID]

/*Counts by LA, Gender and Accommodation Status category*/
select LA_CODE, Gender, Accommodation_Status, count(distinct [ID])
from #LTS004_T2b_Final
group by LA_CODE, Gender, Accommodation_Status
;


-------------------------------
/*INVALID COUNTS FOR TABLE 2*/
-------------------------------
--Count of distinct Clients, where Accommodation Status did not match the CLD spec, broken down by Table 2 fields
select LA_CODE, Gender, 'NULL/Invalid' as [Accommodation_Status], count(distinct [ID])
from #LTS004_T2_INVALID_NULL
where [ID] not in
(
select [ID]
from #LTS004_T2_Final
)
group by LA_CODE, Gender
;



---------
/* END */
---------
