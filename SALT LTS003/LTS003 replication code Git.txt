--------------------------------------------------------------
/*CODE TO RE-CREATE LTS003 HIGH-LEVEL TOTAL NUMBER OF CARERS*/
--------------------------------------------------------------


---------------------------------------------------------------------------------------------------
/*CREATE REFERENCE TABLE #REF_DELIVERY_MECH TO CATEGORISE AND RANK ITEMS FOR CARERS*/
---------------------------------------------------------------------------------------------------
--This Reference table will be used to de-duplicate Carers later in the process when they appear more than once in the period of interest
--with conflicting support types. Each Carer can only be counted once as per SALT LTS003 so a hierarchy is applied.
--NOTE: Check periodically to ensure the Defined List in CLD spec has not changed!
drop table if exists #REF_CARER_SUPPORT_HIERARCHY
create table #REF_CARER_SUPPORT_HIERARCHY
(
Support_Provided varchar(200)
,Sort_Order int
,Hierarchy int
)
;

insert into #REF_CARER_SUPPORT_HIERARCHY
(
Support_Provided
,Sort_Order
,Hierarchy
)
values
('Direct Payment only', 1, 1)
,('CASSR Managed Personal Budget', 2, 2)
,('CASSR Commissioned Support only', 3, 3)
,('Support Direct to Carer: Unknown Delivery Mech', 4, 4)
,('Information, Advice and Other Universal Services / Signposting', 5, 5)
,('No Direct Support Provided to Carer', 6, 6)
;





--------------------------------------------------------------------------
/*CREATE TABLE RETURNING LATEST SUBMISSION WITHIN THE PERIOD OF INTEREST*/
--------------------------------------------------------------------------
/*
This code uses a procedure at the beginning to determine the last file submission
from each LA within the window, on the understanding that this was a Final and complete submission.

This process helps to cut down on duplicates and also ensure that the latest edition of each Event is selected.
Because the CLD submissions append/stack and no old data is deleted, then without running a process such as this below previous 
iterations of old events that have subsequently been updated and/or closed will come through 
e.g an event entered onto the system in 2022 showing as open (no Event End Date) will pass through the date filters later on in the process
despite a more recent LA submission in 2024 showing that the same Event ended/closed in 2023.

Set the date parameters for period of interest at the end of the query as per the annotated instructions
*/

drop table if exists #Latest_Submission
  SELECT DISTINCT
    LA_Name,
    ImportDate
     INTO #Latest_Submission
  FROM (
    SELECT
      *,
      ROW_NUMBER() OVER(PARTITION BY LA_Name, LA_Code ORDER BY ImportDate DESC) row
    FROM (
      SELECT
        LA_Name,
        LA_Code,
        ImportDate,
        MIN(Reporting_Period_Start_Date) Reporting_Period_Start_Date,
        MAX(Reporting_Period_End_Date) Reporting_Period_End_Date
 
	  FROM [DHSC_ASC].[CLD_R1_Raw]
	  	  WHERE LA_Name IS NOT NULL
      GROUP BY
        LA_Name,
        LA_Code,
        ImportDate
    ) a
    WHERE Reporting_Period_Start_Date <= '2023-04-01' --beginning of Q1 of year of interest (always 1st April where snapshot or in-year)
    AND Reporting_Period_End_Date >= '2023-12-31' --end of period of interest (enter snapshot date here if snapshot required)
    AND ImportDate > '2023-12-31' --should be after the Reporting Period End Date (when LAs can submit data from)
    AND CONVERT(date, ImportDate) <= '2024-03-01' --user can specify how late submissions can be accepted from (submission window closes 1month after quarter end)
  ) b
  WHERE row = 1

/*
Worked Example:

For 2023/24 SALT publications
The 'in-year' i.e. whole financial year period 23/24 (e.g. for LTS001a) 
and also the snapshot 31st March 2024 (e.g. for LTS001b)
would be 

    WHERE Reporting_Period_Start_Date <= '2023-04-01'
    AND Reporting_Period_End_Date >= '2024-03-31'
    AND ImportDate > '2024-04-31'
    AND CONVERT(date, ImportDate) <= '2024-05-01'

*/



---------------------------
/*CREATE CARER COHORT TABLE*/
-----------------------------

/*
Filter and select the initial Carers cohort, for the period of interest selected.
Age as at Event End Date is derived (to nearest month) using Birth Month and Birth Year. Where these fields are NULL
the dummy date '01/01/1800' is used. This is to allow the CAST functions to work by over-riding NULLs and also means
the dummy dates can be pin-pointed in the age CASE statement later in the process, cased as 'Unknown'.
Removal of NULL ages (as per the Client tables) is not desirable here as Carers age details are much less commonly known to LAs

The filtered dataset below in INNER JOINed to the #Latest_Submission table above to ensure only latest data is used
*/

DECLARE
  @StartDate DATE,
  @EndDate DATE
;

SET @StartDate = '2023-04-01' -- Enter Period of interest Start Date
SET @EndDate = '2023-12-31' -- Enter Period of interest End Date
;

drop table if EXISTS #LTS003_Build
SELECT a.* 
--Derive DOB using 1st month as an arbitrary date. NULLs defaulted to 01/01/1800, so they can be identified in the outputs
,CASE WHEN (Der_Birth_Year is NULL or Der_Birth_Year is NULL) then CAST (('1800-01-01') as DATE)
ELSE CAST((concat(Der_Birth_Year, '-', Der_Birth_Month, '-', '01')) as DATE) END as [Der_DOB]
--
-- Derive age as at period end, using Der_DOB. NULLs defaulted to 01/01/1800, so they can be identified in the outputs
,CASE WHEN (Der_Birth_Year is NULL or Der_Birth_Year is NULL) then FLOOR((DATEDIFF(DAY,'1800-01-01', @EndDate)/365.25))
ELSE FLOOR((DATEDIFF (DAY, (CAST(concat(Der_Birth_Year, '-', Der_Birth_Month, '-', '01') as DATE)), @EndDate))/365.25) END as [Der_Age_EndDate]
--
INTO #LTS003_Build                                                                                                                                                 
FROM [DHSC_ASC].[CLD_R1_Raw] a
inner join #Latest_Submission b on a.LA_Name = b.LA_Name and a.ImportDate = b.ImportDate -- Only take latest (i.e. Final) submission within period of interest
WHERE Client_Type in ('Carer', 'Carer known by association')                                                                                                                           
AND Event_Start_Date <= @EndDate
and (Event_End_Date >= @StartDate or Event_End_Date is NULL)
AND (Date_of_Death >= @StartDate OR Date_of_Death is NULL)
AND Event_Type in ('Request', 'Assessment', 'Service', 'Review')
AND
--three bespoke combinations of Event scenarios below are allowed to make up the Carers cohort as per LTS003. Only valid Service Types and Event Types will come 
--through although Invalid Event Outcomes will still be permitted in cases where they aren't used to filter the data
(
(Service_Type is NULL AND Event_Outcome = 'NFA - Information & Advice / Signposting only')
OR (Service_Type = 'Carer Support: Direct to Carer' or Service_Type = 'Carer Support: Support involving the person cared-for')
OR ((Event_Type = 'Assessment' or Event_Type = 'Review') and Service_Type is NULL)
)
;


------------------------------------------------------------------------------------------------------------------------------------------



----------------------------------------
/*CREATE AMALGAMATED NHS/LA IDENTIFIER*/
----------------------------------------

/*Process used to create unique person ID, taking the NHS Number wherever possible and then deferring to the LA ID to back-fill NHS Number gaps wherever possible*/

/*initially, find all individuals with an NHS Number and stage into a temporary table*/                               
drop table if exists #uniquenhs
SELECT DISTINCT Der_Unique_Record_ID, Der_NHS_Number_Traced_Pseudo, Der_LA_Person_Unique_Identifier_Pseudo, 'NHS' as [Source]                                                                                                                                                     
INTO #uniquenhs                                                                                                                                                           
FROM #LTS003_Build                                                                                                                                                 
where Der_NHS_Number_Traced_Pseudo is not NULL                                                                                          
;



/*where the NHS Number is missing, pull through all individuals LA Unique ID
except in those cases where the LA Unique ID is already present and associated with an individual in #uniquenhs*/
drop table if exists #missingnhs
SELECT distinct a.Der_Unique_Record_ID, a.Der_NHS_Number_Traced_Pseudo, a.Der_LA_Person_Unique_Identifier_Pseudo, 'LA' as [Source]                                                                             
INTO #missingnhs                                                                                                                                                           
FROM #LTS003_Build a                                                                                                                                                
left join #uniquenhs b on a.Der_LA_Person_Unique_Identifier_Pseudo = b.Der_LA_Person_Unique_Identifier_Pseudo                                                                                                          
where a.Der_NHS_Number_Traced_Pseudo is NULL                                                                                              
and b.Der_LA_Person_Unique_Identifier_Pseudo is NULL                                                                                     
;


/*Stack the NHS IDs and the LA IDs from the two temp tables underneath each other in a final table, as an amalgamated 'ID' field*/
drop table if exists #FINAL
select distinct Der_Unique_Record_ID, Der_NHS_Number_Traced_Pseudo as [ID], [Source]                                     
into #FINAL                                                                                                                                                                     
from #uniquenhs                                                                                                                                                           
UNION                                                                                                                                                               
select distinct Der_Unique_Record_ID, Der_LA_Person_Unique_Identifier_Pseudo as [ID], [Source]                        
from #missingnhs
;


/*Add a column to Raw table with the new ID field*/
alter table #LTS003_Build add [ID] nvarchar (200)
GO
;
update a
set a.[ID] = b.[ID]
from #LTS003_Build a left join #FINAL b on a.Der_Unique_Record_ID = b.Der_Unique_Record_ID
;

/*delete rows from table where [ID] is NULL
These records can not be assigned to an individual with 100% accuracy and without the risk of double-counting 
as the NHS ID is NULL and the LA ID is already present in the data associated to an NHS Number*/
delete from #LTS003_Build
where [ID] is NULL
;

--------------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------
/*CASE CARER OUTCOMES INTO SALT CATEGORIES*/
--------------------------------------------
/*The specific scenarios detailed in the initial #LTS003_BUILD are now CASED into the SALT LTS003 buckets*/
drop table if exists #LTS003_CASE
select *,
CASE 
WHEN Service_Type = 'Carer Support: Direct to Carer' and Delivery_Mechanism = 'Direct Payment' THEN 'Direct Payment only'
WHEN Service_Type = 'Carer Support: Direct to Carer' and Delivery_Mechanism = 'CASSR Managed Personal Budget' THEN 'CASSR Managed Personal Budget'
WHEN Service_Type = 'Carer Support: Direct to Carer' and Delivery_Mechanism = 'CASSR Commissioned support' THEN 'CASSR Commissioned Support only'
WHEN Service_Type = 'Carer Support: Direct to Carer' and Delivery_Mechanism not in  ('Direct Payment', 'CASSR Managed Personal Budget', 'CASSR Commissioned support') THEN 'Support Direct to Carer: Unknown Delivery Mech'
WHEN Service_Type = 'Carer Support: Direct to Carer' and Delivery_Mechanism is NULL THEN 'Support Direct to Carer: Unknown Delivery Mech'
WHEN Service_Type = 'Carer Support: Support involving the person cared-for' THEN 'No Direct Support Provided to Carer'
WHEN Event_Type in ('Assessment', 'Review') and Event_Outcome not like 'NFA - Information & Advice / Signposting only' THEN 'No Direct Support Provided to Carer'
WHEN Event_Type in ('Assessment', 'Review') and Event_Outcome is NULL THEN 'No Direct Support Provided to Carer'
WHEN Event_Type in ('Assessment', 'Review') and Event_Outcome = 'NFA - Information & Advice / Signposting only' THEN 'Information, Advice and Other Universal Services / Signposting'
WHEN Event_Type = 'Request' THEN 'Information, Advice and Other Universal Services / Signposting'
END as 'Support_Provided'
into #LTS003_CASE
from #LTS003_Build
;


--------------------
/*JOIN TO REF DATA*/
--------------------
/*Join the Carers data to the Hierarchy reference data, in order to de-duplicate Carers appearing more than once with conflicting support types*/
drop table if exists #LTS003_JOIN
select a.*, b.Hierarchy
into #LTS003_JOIN
from #LTS003_CASE a
left join #REF_CARER_SUPPORT_HIERARCHY b on a.Support_Provided = b.Support_Provided
;


----------------
/*DE-DUPLICATE*/
----------------
/*Pull out lowest Hierarchy / 'RANK' in instances where a Carer appears more than once within the period of interest and pull through the
'Support_Provided' field containing the SALT support categories.
Other breakdowns can be pulled through here such as Ageband (un-comment the Derived fields in the list) and also PSR, Ethnicity etc if needed
but user needs to be aware that this may introduce duplicates (i.e. same Carer with different ages, same Carer with different ethnicities) due to DQ 
issues. These will need to be pin-pointed and de-duplicated somehow to maintain unique headcounts*/
drop table if exists #LTS003
select distinct a.LA_CODE
, a.[ID]
, a.Support_Provided
--, DER_DOB
--, Der_Age_EndDate
into #LTS003
from #LTS003_JOIN a
inner join
(
SELECT LA_Code, [ID], Min(Hierarchy) as [RANK]
FROM #LTS003_JOIN
GROUP BY LA_Code, [ID]
) b
on a.LA_CODE = b.LA_CODE and a.[ID] = b.[ID] and a.Hierarchy = b.[RANK]
;



-------
/*END*/
-------



---------------------------------------
/*QUERIES TO RUN ON THE FINAL DATASET*/
---------------------------------------

/*LA eligible population for the Carer Survey (please change the date range at the start as appropriate)*/
SELECT * FROM #LTS003
;

/*High-Level total of Carers by type of support provided*/
select Support_Provided, count(distinct [ID])
from #LTS003
group by Support_Provided


/*create a count by SALT LTS003 agebands and SALT LTS003 support type categories. Age fields need to have been
included in the #LTS003 table build for this query to run*/  
select
CASE 
WHEN Der_DOB = '1800-01-01' THEN 'Unknown'
WHEN Der_Age_EndDate < 18 THEN 'Carer aged under 18'
WHEN Der_Age_EndDate between 18 and 25 THEN 'Carer aged 18-25'
WHEN Der_Age_EndDate between 26 and 64 THEN 'Carer aged 26-64'
WHEN Der_Age_EndDate between 65 and 84 THEN 'Carer aged 65-84'
WHEN Der_Age_EndDate > 84 THEN 'Carer aged 85+'
END as 'Ageband_Of_Carer'
, Support_Provided
, count (distinct [ID])                                                                                                                                          
from #LTS003
group by
CASE 
WHEN Der_DOB = '1800-01-01' THEN 'Unknown'
WHEN Der_Age_EndDate < 18 THEN 'Carer aged under 18'
WHEN Der_Age_EndDate between 18 and 25 THEN 'Carer aged 18-25'
WHEN Der_Age_EndDate between 26 and 64 THEN 'Carer aged 26-64'
WHEN Der_Age_EndDate between 65 and 84 THEN 'Carer aged 65-84'
WHEN Der_Age_EndDate > 84 THEN 'Carer aged 85+'
END 
, Support_Provided
;